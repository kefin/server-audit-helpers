#!/bin/sh
#
# utils
#
# helper functions for audit scripts
#
# * created: 2012-02-05 Kevin Chan <kefin@makedostudio.com>
# * updated: 2014-11-01 kchan

myname="${0##*/}"

########################################################################
# helper functions

verbose="${VERBOSE:-0}"
debug="${DEBUG:-0}"

error()
{
    [ "$1" ] && printf >&2 "### %s\n" "$*"
    exit 1
}

elog()
{
    if [ "$verbose" -eq 1 ]; then
        printf >&2 "%s\n" "$*"
    fi
}

log()
{
    if [ "$verbose" -eq 1 ]; then
        printf "%s\n" "$*"
    fi
}

dbg()
{
    if [ "$debug" -ne 0 ]; then
        printf >&2 "%s\n" "$*"
    fi
}

check_file()
{
    [ ! -f "$1" ] && error "$myname - cannot find file: $1"
}

check_dir()
{
    [ ! -d "$1" ] && error "$myname - cannot find directory: $1"
}

makedir()
{
    [ "$1" ] && [ ! -d "$1" ] && mkdir -p "$1"
}

check_root_user()
{
    [ $(id -u) != 0 ] && error "Script must be run by root."
}

is_integer()
{
    [ $(expr "$1" : '^[0-9][0-9]*$') -gt 0 ] && return 0 || return 1
}

# notify script is part of the backup-scripts package
NOTIFY="/usr/local/bin/notify"
MAIL="$(which mail)"

notify()
{
    local email="$1"
    local subject="$2"
    local msgfile="$3"
    if [ -x "$NOTIFY" ]; then
        "$NOTIFY" -s "$subject" -f "$msgfile" "$email"
    else
        cat "$msgfile" | "$MAIL" -s "$subject" "$email"
    fi
}

# create temp file

create_tmpfile()
{
    local tmpdir="${TMPDIR:-/tmp}"
    local tmpfile=$(mktemp -q "${tmpdir}/${myname}.XXXXXX")
    [ $? -ne 0 ] && error "Can't create temp file, exiting..."
    #touch "$tmpfile"
    echo "$tmpfile"
}

# function to compare version strings

# version strings should be (major, minor, revision)
# e.g. 0.1.3
# 
# usage:
# cmp_versions "ver1" "ver2"
# e.g. cmp_versions 1.0 1.0.1
#
# returns 0 if ver1 == ver2
# returns 1 if ver1 > ver2
# returns 2 if vers1 < ver2
# returns 3 if error

cmp_versions()
{
   local _v1="$1"
   local _v2="$2"

   local _v1_vars _v1_major _v1_minor _v1_rev
   _v1_vars=$(echo "$_v1" | awk -F. \
       'NF>0 && NF<=3 {
            printf("_v1_major=%s _v1_minor=%s _v1_rev=%s", $1, $2, $3);
       }')
   eval "$_v1_vars"
   [ "X$_v1_minor" = "X" ] && _v1_minor=0
   [ "X$_v1_rev" = "X" ] && _v1_rev=0
   if ! is_integer "$_v1_major" \
       || ! is_integer "$_v1_minor" \
       || ! is_integer "$_v1_rev"; then
       dbg "# Bad version string: $_v1"
       return 3
   fi
   dbg "# _v1_vars: $_v1_vars"
   dbg "#    major: $_v1_major"
   dbg "#    minor: $_v1_minor"
   dbg "#      rev: $_v1_rev"

   local _v2_vars _v2_major _v2_minor _v2_rev
   _v2_vars=$(echo "$_v2" | awk -F. \
       'NF>0 && NF<=3 {
            printf("_v2_major=%s _v2_minor=%s _v2_rev=%s", $1, $2, $3);
       }')
   eval "$_v2_vars"
   [ "X$_v2_minor" = "X" ] && _v2_minor=0
   [ "X$_v2_rev" = "X" ] && _v2_rev=0
   if ! is_integer "$_v2_major" \
       || ! is_integer "$_v2_minor" \
       || ! is_integer "$_v2_rev"; then
       dbg "# Bad version string: $_v2"
       return 3
   fi
   dbg "# _v2_vars: $_v2_vars"
   dbg "#    major: $_v2_major"
   dbg "#    minor: $_v2_minor"
   dbg "#      rev: $_v2_rev"

   if [ "X$_v1_major" = "X" ] || [ "X$_v2_major" = "X" ] \
       || [ "X$_v1_minor" = "X" ] || [ "X$_v2_minor" = "X" ]; then
       return 3
   fi
   if [ $_v1_major -gt $_v2_major ]; then
       return 1
   fi
   if [ $_v1_major -lt $_v2_major ]; then
       return 2
   fi
   if [ $_v1_minor -gt $_v2_minor ]; then
       return 1
   fi
   if [ $_v1_minor -lt $_v2_minor ]; then
       return 2
   fi
   if [ $_v1_rev -gt $_v2_rev ]; then
       return 1
   fi
   if [ $_v1_rev -lt $_v2_rev ]; then
       return 2
   fi
}
