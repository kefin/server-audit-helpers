#!/bin/sh
#
# run_audit
#
# script to run audit tools and email reports to sysadmin
#
# * created: 2011-05-22 Kevin Chan <kefin@makedostudio.com>
# * updated: 2012-07-08 kchan
#
# Add to crontab to run script at regular intervals:
#
# crontab entry to run backup every night @ midnight
# 0 0 * * * /usr/local/audit/bin/run_audit >> /dev/null 2>&1

########################################################################
myname=$(basename "$0")
OLD_PWD=$PWD
cd $(dirname "$0")
mydir=${PWD%/}
cd "$OLD_PWD"
########################################################################


########################################################################
# helper functions

usage()
{
    cat <<EOF
# Script to run audit tools and email reports to sysadmin
#
# Usage: $myname scripts
#   -h    # display usage
#
EOF
    exit 1
}

error()
{
    [ "$1" ] && echo >&2 "###" "$@"
    exit 1
}


########################################################################
# run audit sub-scripts

errors=0

# error function

exec_error()
{
    echo >&2 "# script error: $1"
    $((errors + 1))
}

# functions to test if sub-script exists and is executable
# * is_executable does minimal filtering and checks if script
#   is executable
# * is_audit_script checks if script is executable and is
#   not a backup or utils or dummy.

is_executable()
{
    local script="$1"
    [ -x "$script" ] || echo 0
    case $(basename "$script") in
        $myname|utils)
            echo 0
            ;;
        *)
            echo 1
            ;;
    esac
}

is_audit_script()
{
    local script="$1"
    [ -x "$script" ] || echo 0
    case $(basename "$script") in
        $myname|utils|dummy|*~)
            echo 0
            ;;
        *)
            echo 1
            ;;
    esac
}

# function to run sub-script

run_script()
{
    local script="$1"
    echo >&2 "# running $script ..."
    "$script"
    echo >&2 "# done."
}


# parse parameters

debug=0
scripts=

while [ $# -gt 0 ]
do
    case "$1" in
        -*|-help|--help)
            usage
            ;;
        *)
            if [ ! -f "${mydir}/$1" ]; then
                error "Script not found: ${mydir}/$1"
            fi
            scripts="$scripts $1"
            ;;
    esac
    shift
done


if [ "X$scripts" != "X" ]; then

    # loop through scripts provided as parameters if these exist
    # * for scripts supplied on the command line we do minimal
    #   filtering and execute it if it has the executable bit set.

    for s in $scripts
    do
        script="${mydir}/${s}"
        [ $(is_executable "$script") -eq 1 ] \
            && run_script "$script" \
            || exec_error "$script"
    done

else

    # loop through scripts in audit bin directory if no parameters

    for script in $(find "$mydir" -type f -print | sort)
    do
        [ $(is_audit_script "$script") -eq 1 ] \
            && run_script "$script" \
            || exec_error "$script"
    done

fi

[ "$errors" -eq 0 ] && status=0 || status=1

exit $status
