#!/bin/sh
#
# run_audit
#
# script to run audit tools and email reports to sysadmin
#
# * created: 2011-05-22 Kevin Chan <kefin@makedostudio.com>
# * updated: 2014-11-01 kchan
#
# Add to crontab to run script at regular intervals:
#
# crontab entry to run backup every night @ midnight
# 0 0 * * * /usr/local/audit/bin/run_audit >> /dev/null 2>&1

########################################################################
myname="${0##*/}"
current_wd=$PWD
cd $(dirname "$0")
mydir="${PWD%/}"
cd "$current_wd"
########################################################################

########################################################################
# helper functions

VERSION="0.3.0"
AUTHORS="Kevin Chan <kefin@makedostudio.com>"

show_version()
{
    printf "# script : %s\n" "$myname"
    printf "# version: %s\n" "$VERSION"
    printf "# authors: %s\n" "$AUTHORS"
    exit 0
}

usage()
{
    cat <<EOF
# Script to run audit tools and email reports to sysadmin.
#
# Usage: $myname [options] scripts
#   -h|--helo       # display usage
#   -X|--dry-run    # do dry run
#   -v|--verbose    # print verbose diagnostic messages (this is the default)
#   -q|--quiet      # no output (sets verbose to 0)
#   -n|--no-email   # do not email reports
#   -D|--debug      # output debug messages
#
# Notes:
# * This script will read configuration settings in /etc/audit/${myname}.conf.
# * If DEFAULT_AUDIT_SCRIPTS is defined in the configuration file, $myname
#   will run the scripts when called without supplied script parameters.
# * If DEFAULT_AUDIT_SCRIPTS is undefined, $myname will run all scripts
#   in the package scripts directory.
#
# Examples:
# To run all scripts defined in DEFAULT_AUDIT_SCRIPTS or in the
# /usr/local/audit/bin directory (if DEFAULT_AUDIT__SCRIPTS is not defined):
#
#   /usr/local/audit/bin/run_audit
#
# To run only certain scripts:
#
#   /usr/local/audit/bin/run_audit rkhunter lynis
#
# To run scripts and omit email reports:
#
#   /usr/local/audit/bin/run_audit -n rkhunter lynis
#
EOF
    exit 1
}


########################################################################
# load common code

AUDIT_COMMON="${mydir}/_common"
if [ ! -f "$AUDIT_COMMON" ]; then
    printf >&2 "### Audit common code module not found: $AUDIT_COMMON\n"
    exit 1
fi
. "$AUDIT_COMMON"


########################################################################
# parse parameters

tmpfile=
email_report=1
scripts=

while [ $# -gt 0 ]
do
    case "$1" in
        -V|--version)
            show_version
            ;;
        -\?|-h|-help|--help)
            usage
            ;;
        -v|--verbose)
            verbose=1
            ;;
        -q|--quiet)
            verbose=0
            ;;
        -X|--dry-run)
            dry_run=1
            ;;
        -D|--debug)
            debug=1
            ;;
        -n|--no-email|--no-report)
            email_report=0
            ;;
        -*)
            error "Unknown option: $1"
            ;;
        *)
            scripts="$scripts $1"
            ;;
    esac
    shift
done

if [ $dry_run -ne 0 ]; then
    verbose=1
    printf >&2 "# dry run ..."
fi

cleanup()
{
    [ -f "$tmpfile" ] && rm -f "$tmpfile"
}

if [ $dry_run -eq 0 ]; then
    tmpfile="$(create_tmpfile)"
fi

trap "cleanup" EXIT


########################################################################
# set vars and define functions

# functions to test if sub-script exists and is executable
# * is_executable does minimal filtering and checks if script
#   is executable
# * is_audit_script checks if script is executable and is
#   not a backup or utils or dummy.

is_executable()
{
    local script="$1"
    [ -x "$script" ] || return 1
    case "${script##*/}" in
        $myname|utils)
            return 1
            ;;
        *)
            return 0
            ;;
    esac
}

is_audit_script()
{
    local script="$1"
    [ -x "$script" ] || return 1
    case "${script##*/}" in
        $myname|utils|dummy|*~|*[._-][Bb][Aa][Kk]|-*|\#*\#|*.sw[nop])
            return 1
            ;;
        *|_*)
            return 0
            ;;
    esac
}

# function to execute script and send results by email
# parameters:
# * script (full path to executable audit script)
# * exits 0 if no errors, else 1

run_script()
{
    local script="$1"
    local command_name="${script##*/}"
    local exit_status=0

    elog "# running $script ..."

    if [ $dry_run -ne 0 ]; then
        log "$script"
    else
        if [ "X$tmpfile" = "X" ]; then
            tmpfile="$(create_tmpfile)"
            elog "# created tmpfile: $tmpfile"
        fi
        elog "# tmpfile: $tmpfile"
        {
            printf "%s\n" $DIVIDER
            printf "# Script : $command_name\n"
            printf "# Start  : $(date '+%Y-%m-%d %H:%M:%S')\n"
            printf "\n"
            tstart=$(date +'%s')
            if [ -x "$script" ]; then
                "$script" || exit_status=1
            else
                printf "### Unable to run script: $script\n"
            fi
            tfinish=$(date +'%s')
            elapsed=$(expr "$tfinish" - "$tstart" \
                | awk '{printf("%02dm%02ds\n", $1/60, $1%60);}')
            printf "\n"
            printf "# Finish : $(date '+%Y-%m-%d %H:%M:%S')\n"
            printf "# Elapsed: $elapsed\n"
            printf "%s\n" $DIVIDER
            printf "\n"
        } >"$tmpfile" 2>&1
        if [ $email_report -ne 0 ]; then
            recipients="${EMAIL:-$RECIPIENTS}"
            if [ "X$recipients" != "X" ]; then
                if [ "X$SUBJECT" != "X" ]; then
                    subject="$SUBJECT - ${command_name}"
                else
                    subject="${command_name} output"
                fi
                for email in $recipients
                do
                    notify "$email" "$(date '+%Y-%m-%d') $subject" "$tmpfile"
                done
            fi
        else
            cat "$tmpfile"
        fi
    fi

    elog "# done."
    elog ""

    return $exit_status
}


########################################################################
# loop through scripts and run each one

# if no scripts are supplied as parameters, check if
# DEFAULT_AUDIT_SCRIPTS is defined and use that list.
# if not defined, loop through scripts in audit bin directory
# and add all runnable scripts.

if [ "X$scripts" = "X" ]; then
    if [ "X$DEFAULT_AUDIT_SCRIPTS" != "X" ]; then
        scripts="$DEFAULT_AUDIT_SCRIPTS"
    else
        find "$BASE_DIR" -type f -print | sort | while read _script
        do
            case "$_script" in
                *disabled/*)
                    ;;
                *)
                    if is_audit_script "$_script"; then
                        _script_name="${_script##*/}"
                        scripts="$scripts $_script_name"
                    fi
                    ;;
            esac
        done
    fi
fi

for s in $scripts
do
    script="${BASE_DIR}/${s}"
    if is_executable "$script"; then
        run_script "$script" || errors=$((errors + 1))
    else
        printf >&2 "# %s\n" "Script is not executable: $script"
        errors=$((errors + 1))
    fi
done

if [ "$errors" -eq 0 ]; then
    status=0
else
    elog "# errors: $errors"
    status=1
fi

exit $status
